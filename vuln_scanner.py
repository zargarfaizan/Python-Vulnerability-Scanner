import nmap
import requests
from fpdf import FPDF

# Initialize Nmap scanner
nm = nmap.PortScanner()

def scan_network(target_ip):
    print(f"Scanning {target_ip}...")
    try:
        # Full Nmap scan: -A (Aggressive Scan), -p- (All Ports)
        nm.scan(target_ip, arguments='-A -p- -T4 -v')
    except Exception as e:
        print(f"Error during scan: {e}")
        return {}
    
    scan_data = {}
    
    for host in nm.all_hosts():
        if nm[host].state() == "up":
            scan_data[host] = []
            for proto in nm[host].all_protocols():
                ports = nm[host][proto].keys()
                for port in ports:
                    service = nm[host][proto][port]['name']
                    scan_data[host].append({"port": port, "service": service})
    
    print("Scan Data:", scan_data)  # Print scan data for debugging
    return scan_data

def fetch_cve(service_name):
    """Fetch known CVEs for a service."""
    url = f"https://cve.circl.lu/api/search/{service_name}"
    response = requests.get(url)
    if response.status_code == 200:
        cve_data = response.json()
        print(f"Fetched CVE data for {service_name}: {cve_data}")  # Debugging line
        return cve_data[:3]  # Return top 3 vulnerabilities
    print(f"Failed to fetch CVE data for {service_name}, status code: {response.status_code}")  # Debugging line
    return []

def generate_report(scan_data, report_file='vulnerability_report.pdf'):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, txt="Vulnerability Scan Report", ln=True, align="C")

    for host, services in scan_data.items():
        pdf.set_font("Arial", "B", 12)
        pdf.cell(200, 10, txt=f"Host: {host}", ln=True)
        
        for service in services:
            port = service['port']
            service_name = service['service']
            pdf.set_font("Arial", "I", 10)
            pdf.cell(200, 10, txt=f"Port: {port}, Service: {service_name}", ln=True)
            
            # Fetch CVEs
            cve_data = fetch_cve(service_name)
            if cve_data:
                pdf.set_font("Arial", "", 10)
                for cve in cve_data:
                    cve_id = cve.get('id', 'N/A')
                    cve_summary = cve.get('summary', 'N/A')[:80]
                    pdf.cell(200, 10, txt=f"Vulnerability: {cve_id}, Summary: {cve_summary}...", ln=True)

    pdf.output(report_file)
    print(f"Report saved as {report_file}")

def scan_from_file(input_file):
    scan_data = {}
    with open(input_file, 'r') as file:
        ips = file.readlines()
        for ip in ips:
            ip = ip.strip()
            if ip:  # Ignore empty lines
                print(f"Scanning IP: {ip}")
                data = scan_network(ip)
                scan_data.update(data)
    
    generate_report(scan_data)

if __name__ == "__main__":
    input_file = input("Enter the path to the IP addresses file: ")
    scan_from_file(input_file)
